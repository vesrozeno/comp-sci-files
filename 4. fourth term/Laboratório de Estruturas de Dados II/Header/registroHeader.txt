#include <stdio.h>
#include <stdlib.h>

//Heitor Xavier de Abreu
//RA: 211040983

//As funções que utilizam a implementação da chave primária estão logo acima da função main
//Mais especificamente na linha 119

typedef struct{
    int id;
    char tarefa[60];
    int dia, mes, ano;
}ToDo;

typedef struct{
    int id;
    long posicao;
}Index;

int cadastrar_todo(ToDo **t, int quant, int tam){
    if(quant < tam){
        ToDo *novo = malloc(sizeof(ToDo));

        printf("\nDigite a tarefa: ");
        scanf("%50[^\n]", novo->tarefa);

        printf("\nDigite o ID da tarefa: ");
        scanf("%d", &novo->id);

        printf("\nDigite a data prevista dd mm aaaa: ");
        scanf("%d%d%d", &novo->dia, &novo->mes, &novo->ano);
        getchar();
        t[quant] = novo;
        return 1;
    }
    else{
        printf("\nERRO! Vetor cheio.\n");
        return 0;
    }
}

void imprimir(ToDo **t, int quant){
    int i;

    printf("\n-------------Lista-de-Tarefas-------------\n");
    for(i=0; i<quant; i++){
        printf("ID: %d", t[i]->id);
        printf("\t%d = %2d/%2d/%4d\t%s\n", i+1, t[i]->dia, t[i]->mes, t[i]->ano, t[i]->tarefa);

    }
    
    printf("------------------------------------------\n");
}

void alterar_todo(ToDo **t, int quant){
    int id;

    imprimir(t, quant);
    printf("\n\tDigite a tarefa a ser alterada: ");
    scanf("%d", &id);
    getchar();
    id--;
    if(id >= 0 && id < quant){
        ToDo *novo = malloc(sizeof(ToDo));
        printf("\nDigite a nova tarefa: ");
        scanf("%50[^\n]", novo->tarefa);
        printf("\nDigite a data da tarefa (dd mm aaaa)");
    }
    else
        printf("\n\tCodigo invalido!\n");
}

void salvar(ToDo **t, int quant, char arq[]){
    FILE *file = fopen(arq, "w");
    FILE *f_index = fopen("indexHeader.txt", "w");
    int i;
    long posicao;

    if(file){
        fprintf(file, "%d\n", quant);
        fprintf(f_index, "%d\n", quant);
        for(i=0; i<quant; i++){
            posicao = ftell(file);
            fputs(t[i]->tarefa, file);
            fputc('\n', file);
            fprintf(file, "%d %d %d %d\n", t[i]->id, t[i]->dia, t[i]->mes, t[i]->ano);
            fprintf(f_index, "%d %ld\n", t[i]->id, posicao);
        }
    fclose(file);
    fclose(f_index);
    }
    else
        printf("\n\tERRO AO ABRIR/CRIAR O ARQUIVO!\n");
}

int ler_arquivo(ToDo **c, char arq[]){
    FILE *file = fopen(arq, "r");
    int quant = 0, i;
    ToDo *novo;
    if(file){
        fscanf(file, "%d\n", &quant);
        for(i=0; i<quant; i++){
            novo = malloc(sizeof(ToDo));
            fscanf(file, "%50[^\n]", novo->tarefa);
            fscanf(file, "%d %d %d %d\n", &novo->id, &novo->dia, &novo->mes, &novo->ano);
            c[i] = novo;
        }
    }
    else
        printf("\n\tERRO AO ABRIR/CRIAR O ARQUIVO!\n");

    fclose(file);

    return quant;
}


//AQUI COMEÇAM AS FUNÇÕES PARA LIDAR COM INDEX

//Esta função lê o arquivo de índices e carrega as
//chaves primárias e suas posições relativas na memória
//para agilizar o acesso
int carregarIndex(Index **ind){
    FILE *f_index = fopen("indexHeader.txt", "r");
    if(!f_index){
        printf("\nNão foi possível abrir o arquivo de índices.");
        return -1;
    }
    
    int n, i, id;
    long posicao;
    fscanf(f_index, "%d", &n);
    Index *novo;
    for(i=0; i<n; i++){
        novo = malloc(sizeof(Index));
        fscanf(f_index, "%d %ld", &novo->id, &novo->posicao);
        ind[i] = novo;
    }
    printf("\n\tChaves primárias cadastradas:\n");
    for(i = 0; i<n; i++){
        printf("\tID: [%d]\n", ind[i]->id);
    }
    fclose(f_index);
    return n;
}

//Esta função usa o arquivo de índices já carregado na memória
//para buscar a tarefa relacionada ao índice.
//A função consegue ler os dados corretamente, pois as IDs contém
//um campo especificando sua posição no arquivo
void buscaPorChave(Index **ind, int quant_index, char arq[]){
    int i, id;
    char tarefa[60];
    int dia, mes, ano, aux;
    
    FILE *file = fopen(arq, "r");
    if(!file){
        printf("\nNão foi possível abrir o arquivo de cadastros.");
        return;
    }
    
    printf("\nDigite o ID da tarefa que deseja buscar: ");
    scanf("%d", &id);
    getchar();
    
    for(i=0; i<quant_index; i++){
        if(id == ind[i]->id){
            fseek(file, ind[i]->posicao, SEEK_SET);
            fscanf(file, "%50[^\n]", tarefa);
            fscanf(file, " %d %d %d %d", &aux, &dia, &mes, &ano);
            printf("\nTarefa encontrada!\n");
            printf("%s : %d/%d/%d\n", tarefa, dia, mes, ano);
            return;
        }
    }
    fclose(file);
    printf("\nAluno não encontrado no cadastro");

}

int main(){
    ToDo *tarefa[100];
    Index *index[100];
    char arquivo[] = {"ToDo.txt"};
    char arquivo_ind[] = {"indexHeader.txt"};
    int opcao, tam = 100, quant = 0;

    int x;

    quant = ler_arquivo(tarefa, arquivo);

    do{
        printf("\n\tMENU DE OPÇÕES");
        printf("\n\t0 - Sair");
        printf("\n\t1 - Cadastrar");
        printf("\n\t2 - Alterar");
        printf("\n\t3 - Imprimir");
        printf("\n\t4 - Salvar");
        printf("\n\t5 - Ler Arquivo");
        printf("\n\t6 - Buscar tarefa no arquivo\n");
        scanf("%d", &opcao);
        getchar();
        switch(opcao){
            case 1:
                quant += cadastrar_todo(tarefa, quant, tam);
                break;
            case 2:
                alterar_todo(tarefa, quant);
                break;
            case 3:
                imprimir(tarefa, quant);
                break;
            case 4:
                salvar(tarefa, quant, arquivo);
                break;
            case 5:
                quant = ler_arquivo(tarefa, arquivo);
                break;
            case 6:
                x = carregarIndex(index);
                if(x != -1)
                    buscaPorChave(index, x, arquivo);
                break;
            default:
                if(opcao != 0)
                    printf("\n\tOpção inválida!\n");
        }
    }while(opcao != 0);

    return 0;
}